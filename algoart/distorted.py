import numpy as np

def line(x_start, y_start, x_end, y_end, steps = 100, dist_level = 0.02, include_nan = False, two_d_output = False):
    #print(steps)
    #print(dist_level)
    # if x_start == x_end:
    #     x = np.ones(steps)*x_start
    # else:
    x = np.linspace(x_start, x_end, steps)
    # if y_start == y_end:
    #     y = np.ones(steps)*y_start
    # else:
    y = np.linspace(y_start, y_end, steps)

    x[1:-1] = x[1:-1] + (np.random.rand(len(x)-2)-0.5)*dist_level
    y[1:-1] = y[1:-1] + (np.random.rand(len(y)-2)-0.5)*dist_level

    if include_nan:
        x = np.append(x, np.nan)
        y = np.append(y, np.nan)

    if two_d_output:
        return np.vstack((x, y)).T

    return x, y

def line_smooth(x_start, y_start, x_end, y_end, steps = 100, dist_level = 0.02, include_nan = False, two_d_output = False):
    from scipy.interpolate import interp1d
    x, y = line(x_start, y_start, x_end, y_end, steps, dist_level, include_nan = False, two_d_output = False)

    orig_len = len(x)
    t = np.arange(len(x))
    ti = np.linspace(0, orig_len - 1, 5 * orig_len)
    x = interp1d(t, x, kind='cubic')(ti)
    y = interp1d(t, y, kind='cubic')(ti)

    if include_nan:
        x = np.append(x, np.nan)
        y = np.append(y, np.nan)

    if two_d_output:
        return np.vstack((x, y)).T

    return x, y

def circle(centre_x, centre_y, diameter, steps, distort_level):
    z = np.linspace(0,np.pi*2+np.pi*2/steps*2,steps)
    x = np.sin(z)*diameter+(np.random.rand(z.size)-0.5)*distort_level
    y = np.cos(z)*diameter+(np.random.rand(z.size)-0.5)*distort_level
    x[-2] = x[0]
    y[-2] = y[0]
    x[-1] = np.nan
    y[-1] = np.nan
    return centre_x+x,centre_y+y

def circle2(centre_x, centre_y, diameter, steps, distort_level, two_d_output = False):
    i = np.linspace(0, np.pi * 2 , steps, endpoint=True) # + np.pi * 2 / steps
    r = (np.random.rand(steps)-0.5) * distort_level
    ax = np.sin(i) * (1 + r) * diameter
    ay = np.cos(i) * (1 + r) * diameter

    ax[-1] = ax[0]
    ay[-1] = ay[0]

    ax = np.append(ax,np.nan)
    ay = np.append(ay,np.nan)

    ax = ax + centre_x
    ay = ay + centre_y

    if two_d_output:
        return np.vstack((ax, ay)).T

    return ax, ay

def line_end(x_start, y_start, x_end, y_end, steps = 100, dist_level = 0.02):

    if x_start == x_end:
        x = np.ones(steps)*x_start
    else:
        x = np.linspace(x_start, x_end, steps)
    if y_start == y_end:
        y = np.ones(steps)*y_start
    else:
        y = np.linspace(y_start, y_end, steps)

    x[1:-1] = x[1:-1] + (np.random.rand(len(x)-2)-0.5)*dist_level
    y[1:-1] = y[1:-1] + (np.random.rand(len(y)-2)-0.5)*dist_level

    x = np.append(x,np.nan)
    y = np.append(y,np.nan)

    return x, y

def rectangle(xcor1, ycor1, xcor2, ycor2, steps = 100, dist_level = 0.02, two_d_output = False):
    x0,y0 = line(xcor1, ycor1, xcor1, ycor2, steps, dist_level)
    x1,y1 = line(xcor1, ycor2, xcor2, ycor2, steps, dist_level)
    x2,y2 = line(xcor2, ycor2, xcor2, ycor1, steps, dist_level)
    x3,y3 = line(xcor2, ycor1, xcor1, ycor1, steps, dist_level)
    x = np.concatenate((x0,x1,x2,x3))
    y = np.concatenate((y0,y1,y2,y3))

    if two_d_output:
        return np.vstack((x, y)).T

    return x,y

def text(position_x,position_y, text_string, text_size = 1):
    ascii = {}
    ascii[32] = [-1, -1]
    ascii[33] = [5, 21, 5, 7, -1, -1, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2]
    ascii[34] = [4, 21, 4, 14, -1, -1, 12, 21, 12, 14]
    ascii[35] = [11, 25, 4, -7, -1, -1, 17, 25, 10, -7, -1, -1, 4, 12, 18, 12, -1, -1, 3, 6, 17, 6]
    ascii[36] = [8, 25, 8, -4, -1, -1, 12, 25, 12, -4, -1, -1, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4,
                 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3]
    ascii[37] = [21, 21, 3, 0, -1, -1, 8, 21, 10, 19, 10, 17, 9, 15, 7, 14, 5, 14, 3, 16, 3, 18, 4, 20, 6, 21, 8, 21,
                 10, 20, 13, 19, 16, 19, 19, 20, 21, 21, -1, -1, 17, 7, 15, 6, 14, 4, 14, 2, 16, 0, 18, 0, 20, 1, 21, 3,
                 21, 5, 19, 7, 17, 7]
    ascii[38] = [23, 12, 23, 13, 22, 14, 21, 14, 20, 13, 19, 11, 17, 6, 15, 3, 13, 1, 11, 0, 7, 0, 5, 1, 4, 2, 3, 4, 3,
                 6, 4, 8, 5, 9, 12, 13, 13, 14, 14, 16, 14, 18, 13, 20, 11, 21, 9, 20, 8, 18, 8, 16, 9, 13, 11, 10, 16,
                 3, 18, 1, 20, 0, 22, 0, 23, 1, 23, 2]
    ascii[39] = [5, 19, 4, 20, 5, 21, 6, 20, 6, 18, 5, 16, 4, 15]
    ascii[40] = [11, 25, 9, 23, 7, 20, 5, 16, 4, 11, 4, 7, 5, 2, 7, -2, 9, -5, 11, -7]
    ascii[41] = [3, 25, 5, 23, 7, 20, 9, 16, 10, 11, 10, 7, 9, 2, 7, -2, 5, -5, 3, -7]
    ascii[42] = [8, 21, 8, 9, -1, -1, 3, 18, 13, 12, -1, -1, 13, 18, 3, 12]
    ascii[43] = [13, 18, 13, 0, -1, -1, 4, 9, 22, 9]
    ascii[44] = [6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4]
    ascii[45] = [4, 9, 22, 9]
    ascii[46] = [5, 2, 4, 1, 5, 0, 6, 1, 5, 2]
    ascii[47] = [20, 25, 2, -7]
    ascii[48] = [9, 21, 6, 20, 4, 17, 3, 12, 3, 9, 4, 4, 6, 1, 9, 0, 11, 0, 14, 1, 16, 4, 17, 9, 17, 12, 16, 17, 14, 20,
                 11, 21, 9, 21]
    ascii[49] = [6, 17, 8, 18, 11, 21, 11, 0]
    ascii[50] = [4, 16, 4, 17, 5, 19, 6, 20, 8, 21, 12, 21, 14, 20, 15, 19, 16, 17, 16, 15, 15, 13, 13, 10, 3, 0, 17, 0]
    ascii[51] = [5, 21, 16, 21, 10, 13, 13, 13, 15, 12, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3,
                 4]
    ascii[52] = [13, 21, 3, 7, 18, 7, -1, -1, 13, 21, 13, 0]
    ascii[53] = [15, 21, 5, 21, 4, 12, 5, 13, 8, 14, 11, 14, 14, 13, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5,
                 1, 4, 2, 3, 4]
    ascii[54] = [16, 18, 15, 20, 12, 21, 10, 21, 7, 20, 5, 17, 4, 12, 4, 7, 5, 3, 7, 1, 10, 0, 11, 0, 14, 1, 16, 3, 17,
                 6, 17, 7, 16, 10, 14, 12, 11, 13, 10, 13, 7, 12, 5, 10, 4, 7]
    ascii[55] = [17, 21, 7, 0, -1, -1, 3, 21, 17, 21]
    ascii[56] = [8, 21, 5, 20, 4, 18, 4, 16, 5, 14, 7, 13, 11, 12, 14, 11, 16, 9, 17, 7, 17, 4, 16, 2, 15, 1, 12, 0, 8,
                 0, 5, 1, 4, 2, 3, 4, 3, 7, 4, 9, 6, 11, 9, 12, 13, 13, 15, 14, 16, 16, 16, 18, 15, 20, 12, 21, 8, 21]
    ascii[57] = [16, 14, 15, 11, 13, 9, 10, 8, 9, 8, 6, 9, 4, 11, 3, 14, 3, 15, 4, 18, 6, 20, 9, 21, 10, 21, 13, 20, 15,
                 18, 16, 14, 16, 9, 15, 4, 13, 1, 10, 0, 8, 0, 5, 1, 4, 3]
    ascii[58] = [5, 14, 4, 13, 5, 12, 6, 13, 5, 14, -1, -1, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2]
    ascii[59] = [5, 14, 4, 13, 5, 12, 6, 13, 5, 14, -1, -1, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4]
    ascii[60] = [20, 18, 4, 9, 20, 0]
    ascii[61] = [4, 12, 22, 12, -1, -1, 4, 6, 22, 6]
    ascii[62] = [4, 18, 20, 9, 4, 0]
    ascii[63] = [3, 16, 3, 17, 4, 19, 5, 20, 7, 21, 11, 21, 13, 20, 14, 19, 15, 17, 15, 15, 14, 13, 13, 12, 9, 10, 9, 7,
                 -1, -1, 9, 2, 8, 1, 9, 0, 10, 1, 9, 2]
    ascii[64] = [18, 13, 17, 15, 15, 16, 12, 16, 10, 15, 9, 14, 8, 11, 8, 8, 9, 6, 11, 5, 14, 5, 16, 6, 17, 8, -1, -1,
                 12, 16, 10, 14, 9, 11, 9, 8, 10, 6, 11, 5, -1, -1, 18, 16, 17, 8, 17, 6, 19, 5, 21, 5, 23, 7, 24, 10,
                 24, 12, 23, 15, 22, 17, 20, 19, 18, 20, 15, 21, 12, 21, 9, 20, 7, 19, 5, 17, 4, 15, 3, 12, 3, 9, 4, 6,
                 5, 4, 7, 2, 9, 1, 12, 0, 15, 0, 18, 1, 20, 2, 21, 3, -1, -1, 19, 16, 18, 8, 18, 6, 19, 5]
    ascii[65] = [9, 21, 1, 0, -1, -1, 9, 21, 17, 0, -1, -1, 4, 7, 14, 7]
    ascii[66] = [4, 21, 4, 0, -1, -1, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, -1, -1, 4,
                 11, 13, 11, 16, 10, 17, 9, 18, 7, 18, 4, 17, 2, 16, 1, 13, 0, 4, 0]
    ascii[67] = [18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0,
                 15, 1, 17, 3, 18, 5]
    ascii[68] = [4, 21, 4, 0, -1, -1, 4, 21, 11, 21, 14, 20, 16, 18, 17, 16, 18, 13, 18, 8, 17, 5, 16, 3, 14, 1, 11, 0,
                 4, 0]
    ascii[69] = [4, 21, 4, 0, -1, -1, 4, 21, 17, 21, -1, -1, 4, 11, 12, 11, -1, -1, 4, 0, 17, 0]
    ascii[70] = [4, 21, 4, 0, -1, -1, 4, 21, 17, 21, -1, -1, 4, 11, 12, 11]
    ascii[71] = [18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0,
                 15, 1, 17, 3, 18, 5, 18, 8, -1, -1, 13, 8, 18, 8]
    ascii[72] = [4, 21, 4, 0, -1, -1, 18, 21, 18, 0, -1, -1, 4, 11, 18, 11]
    ascii[73] = [4, 21, 4, 0]
    ascii[74] = [12, 21, 12, 5, 11, 2, 10, 1, 8, 0, 6, 0, 4, 1, 3, 2, 2, 5, 2, 7]
    ascii[75] = [4, 21, 4, 0, -1, -1, 18, 21, 4, 7, -1, -1, 9, 12, 18, 0]
    ascii[76] = [4, 21, 4, 0, -1, -1, 4, 0, 16, 0]
    ascii[77] = [4, 21, 4, 0, -1, -1, 4, 21, 12, 0, -1, -1, 20, 21, 12, 0, -1, -1, 20, 21, 20, 0]
    ascii[78] = [4, 21, 4, 0, -1, -1, 4, 21, 18, 0, -1, -1, 18, 21, 18, 0]
    ascii[79] = [9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19,
                 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21]
    ascii[80] = [4, 21, 4, 0, -1, -1, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 14, 17, 12, 16, 11, 13, 10, 4, 10]
    ascii[81] = [9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19,
                 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, -1, -1, 12, 4, 18, -2]
    ascii[82] = [4, 21, 4, 0, -1, -1, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, 4, 11, -1,
                 -1, 11, 11, 18, 0]
    ascii[83] = [17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6,
                 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3]
    ascii[84] = [8, 21, 8, 0, -1, -1, 1, 21, 15, 21]
    ascii[85] = [4, 21, 4, 6, 5, 3, 7, 1, 10, 0, 12, 0, 15, 1, 17, 3, 18, 6, 18, 21]
    ascii[86] = [1, 21, 9, 0, -1, -1, 17, 21, 9, 0]
    ascii[87] = [2, 21, 7, 0, -1, -1, 12, 21, 7, 0, -1, -1, 12, 21, 17, 0, -1, -1, 22, 21, 17, 0]
    ascii[88] = [3, 21, 17, 0, -1, -1, 17, 21, 3, 0]
    ascii[89] = [1, 21, 9, 11, 9, 0, -1, -1, 17, 21, 9, 11]
    ascii[90] = [17, 21, 3, 0, -1, -1, 3, 21, 17, 21, -1, -1, 3, 0, 17, 0]
    ascii[91] = [4, 25, 4, -7, -1, -1, 5, 25, 5, -7, -1, -1, 4, 25, 11, 25, -1, -1, 4, -7, 11, -7]
    ascii[92] = [0, 21, 14, -3]
    ascii[93] = [9, 25, 9, -7, -1, -1, 10, 25, 10, -7, -1, -1, 3, 25, 10, 25, -1, -1, 3, -7, 10, -7]
    ascii[94] = [6, 15, 8, 18, 10, 15, -1, -1, 3, 12, 8, 17, 13, 12, -1, -1, 8, 17, 8, 0]
    ascii[95] = [0, -2, 16, -2]
    ascii[96] = [6, 21, 5, 20, 4, 18, 4, 16, 5, 15, 6, 16, 5, 17]
    ascii[97] = [15, 14, 15, 0, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11,
                 0, 13, 1, 15, 3]
    ascii[98] = [4, 21, 4, 0, -1, -1, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8,
                 0, 6, 1, 4, 3]
    ascii[99] = [15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3]
    ascii[100] = [15, 21, 15, 0, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11,
                  0, 13, 1, 15, 3]
    ascii[101] = [3, 8, 15, 8, 15, 10, 14, 12, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0,
                  13, 1, 15, 3]
    ascii[102] = [10, 21, 8, 21, 6, 20, 5, 17, 5, 0, -1, -1, 2, 14, 9, 14]
    ascii[103] = [15, 14, 15, -2, 14, -5, 13, -6, 11, -7, 8, -7, 6, -6, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4,
                  11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3]
    ascii[104] = [4, 21, 4, 0, -1, -1, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0]
    ascii[105] = [3, 21, 4, 20, 5, 21, 4, 22, 3, 21, -1, -1, 4, 14, 4, 0]
    ascii[106] = [5, 21, 6, 20, 7, 21, 6, 22, 5, 21, -1, -1, 6, 14, 6, -3, 5, -6, 3, -7, 1, -7]
    ascii[107] = [4, 21, 4, 0, -1, -1, 14, 14, 4, 4, -1, -1, 8, 8, 15, 0]
    ascii[108] = [4, 21, 4, 0]
    ascii[109] = [4, 14, 4, 0, -1, -1, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, -1, -1, 15, 10, 18, 13, 20,
                  14, 23, 14, 25, 13, 26, 10, 26, 0]
    ascii[110] = [4, 14, 4, 0, -1, -1, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0]
    ascii[111] = [8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, 16, 6, 16, 8, 15, 11, 13, 13,
                  11, 14, 8, 14]
    ascii[112] = [4, 14, 4, -7, -1, -1, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0,
                  8, 0, 6, 1, 4, 3]
    ascii[113] = [15, 14, 15, -7, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11,
                  0, 13, 1, 15, 3]
    ascii[114] = [4, 14, 4, 0, -1, -1, 4, 8, 5, 11, 7, 13, 9, 14, 12, 14]
    ascii[115] = [14, 11, 13, 13, 10, 14, 7, 14, 4, 13, 3, 11, 4, 9, 6, 8, 11, 7, 13, 6, 14, 4, 14, 3, 13, 1, 10, 0, 7,
                  0, 4, 1, 3, 3]
    ascii[116] = [5, 21, 5, 4, 6, 1, 8, 0, 10, 0, -1, -1, 2, 14, 9, 14]
    ascii[117] = [4, 14, 4, 4, 5, 1, 7, 0, 10, 0, 12, 1, 15, 4, -1, -1, 15, 14, 15, 0]
    ascii[118] = [2, 14, 8, 0, -1, -1, 14, 14, 8, 0]
    ascii[119] = [3, 14, 7, 0, -1, -1, 11, 14, 7, 0, -1, -1, 11, 14, 15, 0, -1, -1, 19, 14, 15, 0]
    ascii[120] = [3, 14, 14, 0, -1, -1, 14, 14, 3, 0]
    ascii[121] = [2, 14, 8, 0, -1, -1, 14, 14, 8, 0, 6, -4, 4, -6, 2, -7, 1, -7]
    ascii[122] = [14, 14, 3, 0, -1, -1, 3, 14, 14, 14, -1, -1, 3, 0, 14, 0]
    ascii[123] = [9, 25, 7, 24, 6, 23, 5, 21, 5, 19, 6, 17, 7, 16, 8, 14, 8, 12, 6, 10, -1, -1, 7, 24, 6, 22, 6, 20, 7,
                  18, 8, 17, 9, 15, 9, 13, 8, 11, 4, 9, 8, 7, 9, 5, 9, 3, 8, 1, 7, 0, 6, -2, 6, -4, 7, -6, -1, -1, 6, 8,
                  8, 6, 8, 4, 7, 2, 6, 1, 5, -1, 5, -3, 6, -5, 7, -6, 9, -7]
    ascii[124] = [4, 25, 4, -7]
    ascii[125] = [5, 25, 7, 24, 8, 23, 9, 21, 9, 19, 8, 17, 7, 16, 6, 14, 6, 12, 8, 10, -1, -1, 7, 24, 8, 22, 8, 20, 7,
                  18, 6, 17, 5, 15, 5, 13, 6, 11, 10, 9, 6, 7, 5, 5, 5, 3, 6, 1, 7, 0, 8, -2, 8, -4, 7, -6, -1, -1, 8,
                  8, 6, 6, 6, 4, 7, 2, 8, 1, 9, -1, 9, -3, 8, -5, 7, -6, 5, -7]
    ascii[126] = [3, 6, 3, 8, 4, 11, 6, 12, 8, 12, 10, 11, 14, 8, 16, 7, 18, 7, 20, 8, 21, 10, -1, -1, 3, 8, 4, 10, 6,
                  11, 8, 11, 10, 10, 14, 7, 16, 6, 18, 6, 20, 7, 21, 10, 21, 12]

    # lietuviskos raidės
    # ĄČĘĖĮŠŲŪŽ  ąačcęeėeįišsųuūužz
    ascii[261] = [15, 14, 15, 0, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11,
                  0, 13, 1, 15, 3, -1, -1, 17 - 2, 0, 15 - 2, -2, 15 - 2, -3, 17 - 2, -4, 18 - 2, -3, -1, -1]  # ą
    ascii[260] = [9, 21, 1, 0, -1, -1, 9, 21, 17, 0, -1, -1, 4, 7, 14, 7, -1, -1, 17, 0, 15, -2, 15, -3, 17, -4, 18, -3,
                  -1, -1]

    dd = np.empty([0, 2])
    p = 0
    for a in text_string:
        print(a, ord(a))
        a = ord(a)
        if a not in ascii:
            a = 32
        b = np.array(ascii[a], dtype=float)
        b[b == -1] = np.nan
        x = b[0::2]
        y = b[1::2]
        w = np.nanmax(x) + 1
        if np.isnan(w):
            w = 10
        dd1 = np.vstack((x + p, y)).T
        dd = np.vstack((dd, dd1, (np.nan, np.nan)))
        p += w

    dd = dd * text_size

    dd[:, 0] += position_x
    dd[:, 1] += position_y

    return dd

def save_to_svg_file(data: np.ndarray, file_name: str):
    ldata = data * 35.43307  # convert into milimiters, so 1 point will be 1 mm

    ra = np.nanmin(ldata, axis=0)
    rb = np.nanmax(ldata, axis=0) - np.nanmin(ldata, axis=0)
    ra -= rb * 0.1  # add 10% some space around picture
    rb += rb * 0.2

    str_list = []
    str_list.append('<svg viewBox="{0[0]} {0[1]} {1[0]} {1[1]}" ' \
                    'xmlns="http://www.w3.org/2000/svg">'.format(ra, rb))
    s = []
    for i in range(len(ldata)):
        if not np.isnan(ldata[i][0]):
            s.append("{0[0]:.2f},{0[1]:.2f} ".format(ldata[i]))
        if np.isnan(ldata[i][0]):
            if len(s) > 0:
                str_list.append(
                    '<polyline points="' + ''.join(s) + '" style="fill:none;stroke:black;stroke-width:1" />')
            s = []
    if len(s) > 0:
        str_list.append('<polyline points="' + ''.join(s) + '" style="fill:none;stroke:black;stroke-width:1" />')
    str_list.append('</svg>')

    with open(file_name, 'w') as f:
        f.write(''.join(str_list))

def save_to_svg_file_polygon(data: np.ndarray, file_name: str):
    ldata = data * 35.43307  # convert into milimiters, so 1 point will be 1 mm

    ra = np.nanmin(ldata, axis=0)
    rb = np.nanmax(ldata, axis=0) - np.nanmin(ldata, axis=0)
    ra -= rb * 0.1  # add 10% some space around picture
    rb += rb * 0.2

    str_list = []
    str_list.append('<svg viewBox="{0[0]} {0[1]} {1[0]} {1[1]}" ' \
                    'xmlns="http://www.w3.org/2000/svg">'.format(ra, rb))
    s = []
    for i in range(len(ldata)):
        if not np.isnan(ldata[i][0]):
            s.append("{0[0]:.2f},{0[1]:.2f} ".format(ldata[i]))
        if np.isnan(ldata[i][0]):
            if len(s) > 0:
                str_list.append(
                    '<polygon points="' + ''.join(s) + '" style="fill:none;stroke:black;stroke-width:1" />')
            s = []
    if len(s) > 0:
        str_list.append('<polygon points="' + ''.join(s) + '" style="fill:none;stroke:black;stroke-width:1" />')
    str_list.append('</svg>')

    with open(file_name, 'w') as f:
        f.write(''.join(str_list))

